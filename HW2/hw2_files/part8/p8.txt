# Write a program to detect the guess word in each row of the input image and print it on the screen in all-caps.
# Don't print anything for the empty rows (if any) at the bottom of the image.
# The output in this case is not an image, but text in ASCII format that is printed on the screen.
# For example, for the test image shown below the output should be
#
# CLOUD
#
# BLUNT
#
# ULTRA

# Find all letters within the grid.
# Color each letter in a different random color.
# Identical letters must have the same color.
# Cutouts of all 26 letters used in the word search puzzles can be found in the 'letter_cutouts' folder.
import cv2
import numpy

letters = ["../../letter_cutouts/" + chr(char) + ".png" for char in range(65, 91)]
struct_elems = []

for letter in letters:
    letter_img = cv2.imread(letter)
    letter_img = cv2.cvtColor(letter_img, cv2.COLOR_BGR2GRAY)
    _, letter_img = cv2.threshold(letter_img, 225, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
    struct_elems.append(letter_img)


IMG_NAME = "image_part8b.png"

if IMG_NAME == "image_part8a.png":
    raw_img = cv2.imread(IMG_NAME)
    raw_img = raw_img[20:450, 40:400]
else:
    raw_img = cv2.imread(IMG_NAME)

bw_image = cv2.cvtColor(raw_img, cv2.COLOR_BGR2GRAY)
_, bw_image = cv2.threshold(bw_image, 200, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
# cv2.imshow("img", bw_image)
# cv2.waitKey(000)

row_sum = numpy.sum(bw_image, axis=1, dtype=numpy.int64)

""" Breaking the image into rows """
edges = []
count = 0
last_elem = row_sum[0]
for offset, i in enumerate(row_sum):
    if abs(last_elem - i) > 70000:
        edges.append(offset)
    last_elem = i

rows = []

for i in range(len(edges)-1):
    img = bw_image[edges[i]:edges[i+1], :]
    i = i+2
    if count % 2 == 0:
        rows.append(img)
    count += 1

# for img in rows:
#     cv2.imshow("img", img)
#     cv2.waitKey(1000)

edges = []

col_sum = numpy.sum(rows[0], axis=0, dtype=numpy.int64)
last_elem = col_sum[0]
for offset, i in enumerate(col_sum):
    if abs(last_elem - i) > 8000:
        edges.append(offset)
    last_elem = i


"""Breaking each row into cols"""
for row in rows:
    cols = []
    count = 0
    for i in range(len(edges)-1):
        img = row[:, edges[i]:edges[i+1]]
        i = i+2
        if count % 2 == 0:
            cols.append(img)
        count += 1

    letter_masks = []
    detected_letters = []

    for img in cols:
        cv2.imshow("actual", img)
        cv2.waitKey(500)
        is_E = False
        for i, se in enumerate(struct_elems):
            mask = cv2.erode(img, ~se)
            mask = mask[:-9]
            se = cv2.flip(se, 0)
            se = cv2.flip(se, 1)
            mask = cv2.dilate(mask, ~se)
            # cv2.imshow("mask", mask)
            # cv2.waitKey(100)
            # letter_masks.append(mask)

            if numpy.any(mask) and (i % 26) != 5 and (i % 26) != 8:
                # cv2.imshow(f"detected {i % 26}", mask)
                if i == 4:
                    is_E = True
                if is_E and i == 11:
                    continue
                print(chr((i % 26) + 65), end=" ")
    print()


